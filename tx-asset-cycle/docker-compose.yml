name: tx

services:
  asset-cycle-realtime:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PGSQL_CREDENTIALS_SECRET_NAME=${PGSQL_CREDENTIALS_SECRET_NAME:-prod/database/pgsql/tx-asset-cycle}
        - REDIS_CREDENTIALS_SECRET_NAME=${REDIS_CREDENTIALS_SECRET_NAME:-prod/database/elasticache/tx-asset-cycle}
        - AWS_REGION=us-east-1
        - TX_TYPE=realtime
    container_name: tx-asset-cycle-realtime

    # Mount AWS credentials directory for SSO support
    volumes:
      - ~/.aws:/home/appuser/.aws:ro

    environment:
      # Poetry Configuration
      - POETRY_HOME=/opt/poetry
      - POETRY_NO_INTERACTION=1
      - POETRY_VIRTUALENVS_CREATE=false
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PATH=/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      # Python Configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/usr/src/app

      # AWS Configuration (SSO-compatible)
      - AWS_REGION=us-east-1
      - AWS_PROFILE=${AWS_PROFILE:?AWS_PROFILE must be set}
      - AWS_SDK_LOAD_CONFIG=1
      - AWS_EC2_METADATA_DISABLED=true
      # Don't set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY - let SSO handle it

      # Database Secrets (AWS Secrets Manager)
      - PGSQL_CREDENTIALS_SECRET_NAME=${PGSQL_CREDENTIALS_SECRET_NAME:-prod/database/pgsql/tx-asset-cycle}
      - REDIS_CREDENTIALS_SECRET_NAME=${REDIS_CREDENTIALS_SECRET_NAME:-prod/database/elasticache/tx-asset-cycle}

      # Java Configuration for Amazon Corretto
      - JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
      - JAVA_OPTS=-XX:+UseContainerSupport -Xms768m -Xmx768m -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp

      # Application Configuration
      - OTEL_RESOURCE_ATTRIBUTES=service.name="tx-asset-cycle-realtime"
      - TX_TYPE=realtime

      # Logging Configuration
      - PYTHON_LOG_LEVEL=WARN
      - JAVA_LOG_LEVEL=WARN
      - KCL_LOG_LEVEL=WARN
      - LOG_LEVEL=WARN

      # Kinesis Configuration
      - KINESIS_STREAM_NAME=tx-asset-cycle-vlx-prod-01-stream

    # Resource limits for ECS Fargate compatibility
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1.5G
          cpus: '0.5'

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "python3 /usr/src/app/utils/healthcheck.py"]
      interval: 60s
      timeout: 60s
      retries: 2
      start_period: 90s
    # Restart policy
    restart: unless-stopped

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    networks:
      - kinesis-network

  asset-cycle-reprocess:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PGSQL_CREDENTIALS_SECRET_NAME=${PGSQL_CREDENTIALS_SECRET_NAME:-prod/database/pgsql/tx-asset-cycle}
        - REDIS_CREDENTIALS_SECRET_NAME=${REDIS_CREDENTIALS_SECRET_NAME:-prod/database/elasticache/tx-asset-cycle}
        - AWS_REGION=us-east-1
        - TX_TYPE=reprocess
    container_name: tx-asset-cycle-reprocess

    # Mount AWS credentials directory for SSO support
    volumes:
      - ~/.aws:/home/appuser/.aws:ro

    environment:
      # Poetry Configuration
      - POETRY_HOME=/opt/poetry
      - POETRY_NO_INTERACTION=1
      - POETRY_VIRTUALENVS_CREATE=false
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PATH=/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      # Python Configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/usr/src/app

      # AWS Configuration (SSO-compatible)
      - AWS_REGION=us-east-1
      - AWS_PROFILE=${AWS_PROFILE:?AWS_PROFILE must be set}
      - AWS_SDK_LOAD_CONFIG=1
      - AWS_EC2_METADATA_DISABLED=true
      # Don't set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY - let SSO handle it

      # Database Secrets (AWS Secrets Manager)
      - PGSQL_CREDENTIALS_SECRET_NAME=${PGSQL_CREDENTIALS_SECRET_NAME:-prod/database/pgsql/tx-asset-cycle}
      - REDIS_CREDENTIALS_SECRET_NAME=${REDIS_CREDENTIALS_SECRET_NAME:-prod/database/elasticache/tx-asset-cycle}

      # Java Configuration for Amazon Corretto
      - JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
      - JAVA_OPTS=-XX:+UseContainerSupport -Xms768m -Xmx768m -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp

      # Application Configuration
      - OTEL_RESOURCE_ATTRIBUTES=service.name="tx-asset-cycle-reprocess"
      - TX_TYPE=reprocess

      # Logging Configuration
      - PYTHON_LOG_LEVEL=WARN
      - JAVA_LOG_LEVEL=WARN
      - KCL_LOG_LEVEL=WARN
      - LOG_LEVEL=WARN

      # Kinesis Configuration
      - KINESIS_STREAM_NAME=tx-asset-cycle-vlx-prod-01-stream

    # Resource limits for ECS Fargate compatibility
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1.5G
          cpus: '0.5'

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "python3 /usr/src/app/utils/healthcheck.py"]
      interval: 60s
      timeout: 60s
      retries: 2
      start_period: 90s
    # Restart policy
    restart: unless-stopped

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    networks:
      - kinesis-network

networks:
  kinesis-network:
    driver: bridge